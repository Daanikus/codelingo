funcs:
  - name: isSameName
    type: asserter
    body: |
      function(a, b) {
        return a.toLowerCase() === b.toLowerCase()
      }
tenets:
  - name: named-result-params
    flows:
      codelingo/review:
        comment: Consider what it will look like in godoc. {{returnName}} {{returnType}} will stutter in godoc; better to use {{returnType}}. From [Code Review Comments](https://github.com/golang/go/wiki/CodeReviewComments#named-result-parameters)
      codelingo/docs:
        title: Named Result Parameters
        body: |
          Consider what it will look like in godoc. Named result parameters like:

          ```
          func (n *Node) Parent1() (node *Node)
          func (n *Node) Parent2() (node *Node, err error)
          ```

          will stutter in godoc; better to use:

          ```
          func (n *Node) Parent1() *Node
          func (n *Node) Parent2() (*Node, error)
          ```

          On the other hand, if a function returns two or three parameters of the same type, or if the meaning of a result isn't clear from context, adding names may be useful in some contexts. Don't name result parameters just to avoid declaring a var inside the function; that trades off a minor implementation brevity at the cost of unnecessary API verbosity.
          
          ```
          func (f *Foo) Location() (float64, float64, error)
          ```

          is less clear than:

          ```
          // Location returns f's latitude and longitude.
          // Negative values mean south and west, respectively.
          func (f *Foo) Location() (lat, long float64, err error)
          ```
          
          Naked returns are okay if the function is a handful of lines. Once it's a medium sized function, be explicit with your return values. Corollary: it's not worth it to name result parameters just because it enables you to use naked returns. Clarity of docs is always more important than saving a line or two in your function.

          Finally, in some cases you need to name a result parameter in order to change it in a deferred closure. That is always OK.
    query: |
      import codelingo/ast/go

      go.func_decl(depth = any):
        go.func_type:
          go.field_list:
            sibling_order == 1
            @review comment
            go.field:
              child_count == 2
              go.names:
                go.ident:
                  name as returnName
              any_of:
                go.star_expr:
                  go.ident:
                    name as returnType
                    isSameName(returnName, returnType)
                go.ident:
                  name as returnType
                  isSameName(returnName, returnType)

